{
  "hash": "5ba4f05923d58dbc3b011f3101b60232",
  "result": {
    "markdown": "---\ntitle: \"Utilisation de modèles de régression à coefficients variant dans le temps pour la prévision conjoncturelle\"\nsubtitle: \"Atelier D2E\"\nauthor: \n- Claire du Campe de Rosamel\n- Alain Quartier-la-Tente\nlang: fr\nlanguage: \n title-block-author-plural: Auteurs\n title-block-published: Date\nformat: \n html:\n   number-sections: true\n   toc: true\n   css: \"css/callout.css\"\ndate: 03/16/2023\ndate-format: \"D MMMM YYYY\"\n---\n\n\n> L'objectif de ce TP est d'apprendre à utiliser quelques fonctionnalités du package `tvCoef` pour l'estimation de modèles de régression à coefficients variant dans le temps.\n\nLes packages suivants seront utilisés :\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages_to_install <- c(\"dygraphs\", \"car\", \"dynlm\")\n\npackages <- installed.packages()[,\"Package\"][! packages_to_install %in% installed.packages()[,\"Package\"]]\nif (length(packages) > 0) {\n    install.packages(packages)\n}\nif (\"tvCoef\" %in% installed.packages()[,\"Package\"]) {\n  remotes::install_github(\"palatej/rjd3toolkit\")\n  remotes::install_github(\"palatej/rjd3sts\")\n  remotes::install_github(\"AQLT/tvCoef\")\n}\n```\n:::\n\n\nPour l'installation de tvCoef, voir le [manuel d'installation](manuel_installation.qmd).\nSi vous utiliser le <https://datalab.ssp.cloud.fr>, créer une instance en cliquant ici : [![Onyxia](https://img.shields.io/badge/Launch-Datalab-orange?logo=R)](https://datalab.sspcloud.fr/launcher/ide/rstudio?autoLaunch=true&service.image.custom.enabled=true&service.image.pullPolicy=%C2%ABAlways%C2%BB&service.image.custom.version=%C2%ABaqlt%2Fatelier-tvcoef%3Alatest%C2%BB).\n\nPour ce TP nous utiliserons les données de la base `tvCoef::manufacturing`pour prévoir l'évolution trimestrielle de la production du secteur des autres industries manufacturières (C5, `prod_c5`) à partir de :\n\n- l'acquis de croissance au premier mois du trimestre de l'indice de production industrielle du même secteur (`overhang_ipi1_c5`) ;\n\n- des soldes d'opinion de l'Insee et de la Banque de France.\nCes soldes d'opinion sont trimestrialisés en prenant la place du mois dans le trimestre\\ : \n\n  - `insee_bc_c5_m3` : climat des affaires au 3^e^ mois du trimestre (mars, juin, septembre, décembre)\n  \n  - `insee_oscd_c5_m2` : niveau des carnets de commandes au 2^e^ mois du trimestre (février, mai, septembre, novembre)\n  \n  - `insee_tppre_c5_m3` : solde d'opinion sur l'évolution future de la production au 3^e^ mois du trimestre (février, mai, septembre, novembre).\n  \n  - `bdf_tuc_c5_m2` : taux d'utilisation des capacités de production au deuxième mois du trimestre (février, mai, septembre, novembre).\n\nLes deux dernières variables sont utilisées en différence.\n\nPar simplification, nous estimerons ici le modèle entre le 1993T1 et 2019T4 : pour estimer le modèle au-delà cette date, il faudrait ajouter des indicatrices au cours de l'année 2020 et vérifier si le modèle estimé est toujours bien spécifié.\n\n\nLe modèle peut alors être estimé en utilisant par exemple la fonction `dynlm::dynlm()`^[\nL'avantage de `dynlm` par rapport à `lm` est qu'il permet de gérer directement la différenciation des variables sans avoir à créer de variable temporaire.\n] :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tvCoef)\nlibrary(dynlm)\ndata <- window(manufacturing, start = 1993, end = c(2019, 4))\ny <- data[, \"prod_c5\"]\nmodel_c5 <- dynlm(\n  formula = prod_c5 ~ overhang_ipi1_c5 + insee_bc_c5_m3 + insee_oscd_c5_m2\n  + diff(insee_tppre_c5_m3, 1) + diff(bdf_tuc_c5_m2, 1),\n  data = data\n)\nmodel_c5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nTime series regression with \"ts\" data:\nStart = 1993(2), End = 2019(4)\n\nCall:\ndynlm(formula = prod_c5 ~ overhang_ipi1_c5 + insee_bc_c5_m3 + \n    insee_oscd_c5_m2 + diff(insee_tppre_c5_m3, 1) + diff(bdf_tuc_c5_m2, \n    1), data = data)\n\nCoefficients:\n               (Intercept)            overhang_ipi1_c5  \n                 -6.383023                    0.102405  \n            insee_bc_c5_m3            insee_oscd_c5_m2  \n                  0.061437                   -0.005596  \ndiff(insee_tppre_c5_m3, 1)      diff(bdf_tuc_c5_m2, 1)  \n                  0.039043                    0.397070  \n```\n:::\n:::\n\n\nLes prévisions dans l'échantillon (*in sample*) peuvent être extraites avec les fonctions `fitted()` ou `predict()` et les prévisions en temps-réel (*out of sample*) avec la fonction `tvCoef::oos_prev()`.\n\nPour évaluer la qualité en temps-réel, nous utiliserons les résidus à partir de 2000 :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprev_oos_lm <- oos_prev(model_c5)\nres_lm_is <- residuals(model_c5)\nres_lm_oos <- prev_oos_lm$residuals\nrmse_lm <- c(IS = rmse(res_lm_is), OOS = rmse(res_lm_oos))\nrmse_lm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       IS       OOS \n0.6990756 0.8494077 \n```\n:::\n:::\n\n\nPour tracer les prévisions, on peut utiliser la fonction `plot()` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(window(y, start = 2000))\nlines(prev_oos_lm$prevision, col = \"red\")\nlegend(\"bottomleft\", legend = c(\"y\",\"Prev. temps réel\"),\n       col= c(\"black\", \"red\"), lty = 1)\n```\n\n::: {.cell-output-display}\n![](TP_files/figure-html/prev-lm-1.png){width=672}\n:::\n:::\n\n\n# Régression par morceaux\n\nPour utiliser la régression par morceaux, la première étape est d'analyser les potentielles dates de rupture.\nPour cela nous utiliserons la fonction `tvCoef::piece_reg()` (qui s'appuie sur le package `strucchange`, voir `?strucchange::breakpoints()` pour plus d'informations).\n\n::: {.callout-note}\n## Exercice\nUtiliser la fonction `tvCoef::piece_reg()` sur le modèle précédent et regarder les résultats : y a-t-il des dates de ruptures ? \nPeuvent-elles être interprétées ? \n\nEn utilisant notamment `oos_prev()`, comparer la qualité prédictive des modèles.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg_morceaux <- piece_reg(model_c5)\n# Ici une date de rupture\n# Si pas de rupture détectée, le modèle renvoyé est le modèle initial\nreg_morceaux \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$model\n\nTime series regression with \"ts\" data:\nStart = 1993(2), End = 2019(4)\n\nCall:\ndynlm::dynlm(formula = as.formula(formula), data = data2)\n\nCoefficients:\n               `(Intercept)_2008.75`              overhang_ipi1_c5_2008.75  \n                             1.70092                               0.10847  \n              insee_bc_c5_m3_2008.75              insee_oscd_c5_m2_2008.75  \n                            -0.01335                               0.03653  \n`diff(insee_tppre_c5_m3, 1)_2008.75`      `diff(bdf_tuc_c5_m2, 1)_2008.75`  \n                             0.04306                               0.48388  \n               `(Intercept)_2019.75`              overhang_ipi1_c5_2019.75  \n                           -11.60377                               0.47441  \n              insee_bc_c5_m3_2019.75              insee_oscd_c5_m2_2019.75  \n                             0.10798                              -0.03376  \n`diff(insee_tppre_c5_m3, 1)_2019.75`      `diff(bdf_tuc_c5_m2, 1)_2019.75`  \n                             0.03414                               0.18874  \n\n\n$start\n[1] 1993    2\n\n$end\n[1] 2019    4\n\n$frequency\n[1] 4\n\n$breakdates\n[1] 2008.75\n\n$tvlm\n[1] FALSE\n\nattr(,\"class\")\n[1] \"piecereg\"\n```\n:::\n:::\n\nL'objet précédent est une liste qui contient différentes informations, notamment :\n\n- `model` : le modèle `dynlm` estimé ;\n\n- `breakdates` : la date de rupture : 2008T4.\n\nAnalysons maintenant les erreurs de prévision :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprev_oos_rm <- oos_prev(reg_morceaux)\nres_rm_is <- residuals(reg_morceaux$model)\nres_rm_oos <- prev_oos_rm$residuals\nstart(res_rm_oos) # Commence en 2000 T2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2000    2\n```\n:::\n\n```{.r .cell-code}\nrmse_rm <- c(IS = rmse(res_rm_is), OOS = rmse(res_rm_oos))\nrbind(rmse_lm, rmse_rm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               IS       OOS\nrmse_lm 0.6990756 0.8494077\nrmse_rm 0.5731039 1.3826525\n```\n:::\n:::\n\n\nElle sont ici réduites dans l'échantillon mais augmentent en temps réel ! \nEn regardant plus précisément, cela vient d'erreurs élevées autour de la date de rupture car l'estimation n'est pas suffisamment robuste !\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(res_rm_oos, col = \"red\", main = \"Résidus en temps-réel\")\nlines(res_lm_oos, col = \"black\")\nlegend(\"topleft\", legend = c(\"LM\",\"Reg. par morceaux\"),\n       col= c(\"black\", \"red\"), lty = 1)\n```\n\n::: {.cell-output-display}\n![](TP_files/figure-html/oos-lm-rm-1.png){width=672}\n:::\n:::\n\n\nEn analysant les prévisions à partir de 2010, les erreurs sont réduites par rapport à précédemment mais restent plus élevées que celles de la régression linéaire :\n\n\n::: {.cell}\n\n```{.r .cell-code}\napply(window(ts.union(res_lm_oos, res_rm_oos), start = 2010), 2, rmse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nres_lm_oos res_rm_oos \n 0.7863127  1.1067406 \n```\n:::\n:::\n\n\n:::\n\n::: {.callout-note}\n## Exercice\n\nLe modèle précédent suppose une rupture sur toutes les variables : est-ce réaliste dans ce cas ? \nAppliquer la fonction `tvCoef::hansen.test()` sur votre modèle et interpréter les résultats.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhansen.test(model_c5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nVariable                  L        Stat     Conclusion \n______________________________________________________________ \n(Intercept)                  0.2561   0.47   FALSE   \noverhang_ipi1_c5             0.8564   0.47    TRUE   \ninsee_bc_c5_m3               0.2708   0.47   FALSE   \ninsee_oscd_c5_m2             0.1508   0.47   FALSE   \ndiff(insee_tppre_c5_m3, 1)   0.2568   0.47   FALSE   \ndiff(bdf_tuc_c5_m2, 1)       0.1533   0.47   FALSE   \nVariance                     0.4562   0.47   FALSE   \nJoint Lc                     1.6516   2.11   FALSE   \n\n\nLecture: True means reject H0 at level 5% \n```\n:::\n:::\n\nLe test de Hansen conclut que seul l'acquis d'IPI évolue.\nAttention à l'interprétation du test sur la constante : si cette variable évolue il est possible que la constante aussi.\n\nOn peut également faire des tests de Fisher sur le modèle précédent pour tester si les coefficients sont égaux entre les sous-périodes.\nCela peut être fait avec la fonction `car::linearHypothesis()` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# on rejette H0 => non constance des coefficients\ncar::linearHypothesis(reg_morceaux$model, \"`(Intercept)_2008.75` = `(Intercept)_2019.75`\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear hypothesis test\n\nHypothesis:\n(Intercept)_2008.75` - Intercept)_2019.75` = 0\n\nModel 1: restricted model\nModel 2: y ~ 0 + (`(Intercept)_2008.75` + overhang_ipi1_c5_2008.75 + insee_bc_c5_m3_2008.75 + \n    insee_oscd_c5_m2_2008.75 + `diff(insee_tppre_c5_m3, 1)_2008.75` + \n    `diff(bdf_tuc_c5_m2, 1)_2008.75` + `(Intercept)_2019.75` + \n    overhang_ipi1_c5_2019.75 + insee_bc_c5_m3_2019.75 + insee_oscd_c5_m2_2019.75 + \n    `diff(insee_tppre_c5_m3, 1)_2019.75` + `diff(bdf_tuc_c5_m2, 1)_2019.75`)\n\n  Res.Df    RSS Df Sum of Sq      F  Pr(>F)  \n1     96 37.058                              \n2     95 35.144  1    1.9145 5.1751 0.02516 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\n# on rejette H0 => non constance des coefficients\ncar::linearHypothesis(reg_morceaux$model, \"overhang_ipi1_c5_2019.75 = overhang_ipi1_c5_2008.75\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear hypothesis test\n\nHypothesis:\n- overhang_ipi1_c5_2008.75  + overhang_ipi1_c5_2019.75 = 0\n\nModel 1: restricted model\nModel 2: y ~ 0 + (`(Intercept)_2008.75` + overhang_ipi1_c5_2008.75 + insee_bc_c5_m3_2008.75 + \n    insee_oscd_c5_m2_2008.75 + `diff(insee_tppre_c5_m3, 1)_2008.75` + \n    `diff(bdf_tuc_c5_m2, 1)_2008.75` + `(Intercept)_2019.75` + \n    overhang_ipi1_c5_2019.75 + insee_bc_c5_m3_2019.75 + insee_oscd_c5_m2_2019.75 + \n    `diff(insee_tppre_c5_m3, 1)_2019.75` + `diff(bdf_tuc_c5_m2, 1)_2019.75`)\n\n  Res.Df    RSS Df Sum of Sq      F    Pr(>F)    \n1     96 44.941                                  \n2     95 35.144  1    9.7974 26.484 1.429e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\n# on ne rejette pas H0 => constance des coefficients\ncar::linearHypothesis(reg_morceaux$model, \"`diff(insee_tppre_c5_m3, 1)_2019.75` = `diff(insee_tppre_c5_m3, 1)_2008.75`\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear hypothesis test\n\nHypothesis:\n- diff(insee_tppre_c5_m3,_2008.75`  + diff(insee_tppre_c5_m3,_2019.75` = 0\n\nModel 1: restricted model\nModel 2: y ~ 0 + (`(Intercept)_2008.75` + overhang_ipi1_c5_2008.75 + insee_bc_c5_m3_2008.75 + \n    insee_oscd_c5_m2_2008.75 + `diff(insee_tppre_c5_m3, 1)_2008.75` + \n    `diff(bdf_tuc_c5_m2, 1)_2008.75` + `(Intercept)_2019.75` + \n    overhang_ipi1_c5_2019.75 + insee_bc_c5_m3_2019.75 + insee_oscd_c5_m2_2019.75 + \n    `diff(insee_tppre_c5_m3, 1)_2019.75` + `diff(bdf_tuc_c5_m2, 1)_2019.75`)\n\n  Res.Df    RSS Df Sum of Sq      F Pr(>F)\n1     96 35.201                           \n2     95 35.144  1  0.056906 0.1538 0.6958\n```\n:::\n:::\n\n:::\n\n::: {.callout-note}\n## Exercice\n\nEn exploitant les résultats de l'exercice précédent, simplifier le modèle de régression par morceaux.\n\nOn pourra pour cela utiliser le paramètre `fixed_var` de `piece_reg()` pour fixer certaines variables (i.e. : ne pas découper les régresseurs).\n\nComparer les prévisions avec les modèles précédents.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nIci nous allons fixer toutes les variables sauf les deux premières (constante + acquis d'IPI -- *overhang*)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreg_morceaux2 <- piece_reg(model_c5, fixed_var = c(3, 4, 5, 6))\n\n# Rmq : la date de rupture est détectée sur le modèle complet et non\n#  sur le sous-modèle avec des variables fixes\nreg_morceaux2 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$model\n\nTime series regression with \"ts\" data:\nStart = 1993(2), End = 2019(4)\n\nCall:\ndynlm::dynlm(formula = as.formula(formula), data = data2)\n\nCoefficients:\n              insee_bc_c5_m3              insee_oscd_c5_m2  \n                    0.042179                      0.005864  \n`diff(insee_tppre_c5_m3, 1)`      `diff(bdf_tuc_c5_m2, 1)`  \n                    0.042554                      0.331692  \n       `(Intercept)_2008.75`      overhang_ipi1_c5_2008.75  \n                   -4.386765                      0.106947  \n       `(Intercept)_2019.75`      overhang_ipi1_c5_2019.75  \n                   -4.152134                      0.443726  \n\n\n$start\n[1] 1993    2\n\n$end\n[1] 2019    4\n\n$frequency\n[1] 4\n\n$breakdates\n[1] 2008.75\n\n$tvlm\n[1] FALSE\n\nattr(,\"class\")\n[1] \"piecereg\"\n```\n:::\n\n```{.r .cell-code}\nprev_oos_rm2 <- oos_prev(reg_morceaux2)\nres_rm2_is <- residuals(reg_morceaux2$model)\nres_rm2_oos <- prev_oos_rm2$residuals\nrmse_rm2 <- c(IS = rmse(res_rm2_is), OOS = rmse(res_rm2_oos))\nrbind(rmse_lm, rmse_rm, rmse_rm2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                IS       OOS\nrmse_lm  0.6990756 0.8494077\nrmse_rm  0.5731039 1.3826525\nrmse_rm2 0.6003532 0.8747103\n```\n:::\n\n```{.r .cell-code}\n# Après 2010\napply(window(ts.union(res_lm_oos, res_rm_oos, res_rm2_oos), start = 2010), 2, rmse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n res_lm_oos  res_rm_oos res_rm2_oos \n  0.7863127   1.1067406   0.7050171 \n```\n:::\n:::\n\nCela permet d'améliorer la qualité de la prévision en temps-réel mais pas celle dans l'échantillon.\n\n:::\n\n# Régression locale\n\nPour rappel, la régression locale revient, pour chaque date $t$ à estimer $\\beta_t$\n\n$$\n\\DeclareMathOperator{\\argmin}{argmin}\n\\hat \\beta = \\underset{\\theta_0}{\\argmin}\\sum_{j=1}^T\\left(y_{j}-x_j\\theta_0\\right)^2K_b\\left(\\frac{j-t}{T}\\right)\n$$\n\nDans le package ici utilisé (`tvReg`), le noyau utilisé par défaut est le noyau tricube :\n\n$$\nK(x)=\\frac{35}{32}\\left(\n  1-\n  \\left\\lvert\n  x\n  \\right\\lvert^2\n\\right)^3 \\mathbb 1_{|x| \\leq 1}\n\\text{ et }\nK_b(x)=\\frac 1 b K(x/b)\n$$\n\nPour estimer le modèle, nous utilisons la fonction `tvReg::tvLM` dont le premier paramètre est une formule.\nMais contrairement à `dynlm`, `tvLM` ne gère pas directement les variables en différence :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tvReg)\ntvReg::tvLM(formula = prod_c5 ~ overhang_ipi1_c5 + insee_bc_c5_m3 + insee_oscd_c5_m2\n  + diff(insee_tppre_c5_m3, 1) + diff(bdf_tuc_c5_m2, 1),\n  data = data)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in model.frame.default(formula = prod_c5 ~ overhang_ipi1_c5 + insee_bc_c5_m3 + : les longueurs des variables diffèrent (trouvé pour 'diff(insee_tppre_c5_m3, 1)')\n```\n:::\n:::\n\n\nPour éviter les problèmes liées au variables en différence, nous récupérons les données transformées de `dynlm` en utilisant la fonction `tvCoef::get_data(model_c5)`, ce qui permet également de simplifier la formule en `prod_c5 ~ .`(puisque la base de données alors utilisée ne contient que les exogènes utiles).\n\n::: {.callout-note}\n## Exercice\n\nEstimer le modèle en utilisant les indications précédentes.\n\nQuelle fenêtre est utilisée (paramètre $b$) ? \nEst-ce que les résultats sont différents de ceux de la régression linéaire ? \nTracer les coefficients obtenus à chaque date (fonction `coef()` pour les extraire, il faudrait reconvertir le résultat en objet `ts()`)\n\nComparer les erreurs de prévision dans l'échantillon avec ceux des modèles précédents.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nLa fenêtre retenue est de 0,31 : les résultats seront donc différents de ceux de la régression linéaire.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntvlm <- tvReg::tvLM(formula = prod_c5 ~ .,\n                 data = get_data(model_c5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCalculating regression bandwidth... bw =  0.4698719 \n```\n:::\n\n```{.r .cell-code}\ncoefs_tvlm <- ts(coef(tvlm), end = end(data), frequency = frequency(data))\nplot(coefs_tvlm)\n```\n\n::: {.cell-output-display}\n![](TP_files/figure-html/coef-tvlm-1.png){width=672}\n:::\n:::\n\nIci toutes les coefficients sont variables alors que certains pourraient être fixes comme vu dans la partie précédente.\nPour fixer certaines variables, on pourrait faire une régression en deux étapes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nres_tvlm_is <- residuals(tvlm)\nrmse_tvlm <- c(IS = rmse(res_tvlm_is), OOS = NA)\nrbind(rmse_lm, rmse_rm, rmse_rm2, rmse_tvlm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 IS       OOS\nrmse_lm   0.6990756 0.8494077\nrmse_rm   0.5731039 1.3826525\nrmse_rm2  0.6003532 0.8747103\nrmse_tvlm 0.5971192        NA\n```\n:::\n:::\n\n\nLe RMSE dans l'échantillon est réduit.\n:::\n\n::: {.callout-note}\n## Exercice\n\nL'objectif de cet exercice est de calculer les prévisions hors échantillon.\n\nAppliquer la fonction `tvCoef::oos_prev()` au modèle précédent avec les paramètres `end = end(data), frequency = frequency(data)` (utiles pour garder la structure temporelle des données) : quels sont les paramètres réestimés ?\n\nAppliquer maintenant la même fonction avec le paramètre `fixed_bw = TRUE`.\nÀ quoi cela correspond ?\nComparer les erreurs de prévisions obtenus.\n:::\n\n:::: {.callout-tip collapse=\"true\"}\n## Solution\n\nDans les modèles de régression locales, il y a deux sources de révisions en temps-réel :\n\n1. Actualisation des coefficients du fait de l'ajout de nouveaux points (noyau asymétrique utilisé pour les premières estimations)\n\n2. Actualisation de la fenêtre.\n\n\n::: {.callout-tip icon=false}\n## Actualisation de la fenêtre et des coefficients\n\nPar défaut, avec `oos_prev()` tous les paramètres sont réestimés.\nC'est en particulier le cas de la fenêtre qui est réestimée à chaque date, à chaque observation :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprev_oos_tvlm_all <- oos_prev(tvlm, end = end(data), frequency = frequency(data))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  20 \nCalculating regression bandwidth... bw =  1.419831 \nCalculating regression bandwidth... bw =  2.82952 \nCalculating regression bandwidth... bw =  1.223547 \nCalculating regression bandwidth... bw =  1.170575 \nCalculating regression bandwidth... bw =  1.15924 \nCalculating regression bandwidth... bw =  1.149263 \nCalculating regression bandwidth... bw =  1.042411 \nCalculating regression bandwidth... bw =  0.9797272 \nCalculating regression bandwidth... bw =  0.4014617 \nCalculating regression bandwidth... bw =  0.8781985 \nCalculating regression bandwidth... bw =  0.4896312 \nCalculating regression bandwidth... bw =  0.491814 \nCalculating regression bandwidth... bw =  0.504626 \nCalculating regression bandwidth... bw =  0.4866928 \nCalculating regression bandwidth... bw =  0.3382399 \nCalculating regression bandwidth... bw =  0.4753745 \nCalculating regression bandwidth... bw =  0.4747202 \nCalculating regression bandwidth... bw =  0.478007 \nCalculating regression bandwidth... bw =  0.4662297 \nCalculating regression bandwidth... bw =  0.4636153 \nCalculating regression bandwidth... bw =  0.7847365 \nCalculating regression bandwidth... bw =  0.7712849 \nCalculating regression bandwidth... bw =  0.4601159 \nCalculating regression bandwidth... bw =  0.4618806 \nCalculating regression bandwidth... bw =  0.4630616 \nCalculating regression bandwidth... bw =  0.4480051 \nCalculating regression bandwidth... bw =  0.4333001 \nCalculating regression bandwidth... bw =  0.4067395 \nCalculating regression bandwidth... bw =  0.7120287 \nCalculating regression bandwidth... bw =  0.7082321 \nCalculating regression bandwidth... bw =  0.3906645 \nCalculating regression bandwidth... bw =  0.3970553 \nCalculating regression bandwidth... bw =  0.3421958 \nCalculating regression bandwidth... bw =  0.3365896 \nCalculating regression bandwidth... bw =  0.329112 \nCalculating regression bandwidth... bw =  0.3323843 \nCalculating regression bandwidth... bw =  0.649492 \nCalculating regression bandwidth... bw =  0.4963082 \nCalculating regression bandwidth... bw =  0.552225 \nCalculating regression bandwidth... bw =  0.6002736 \nCalculating regression bandwidth... bw =  0.5783915 \nCalculating regression bandwidth... bw =  0.4433933 \nCalculating regression bandwidth... bw =  0.4365778 \nCalculating regression bandwidth... bw =  0.4698719 \n```\n:::\n\n```{.r .cell-code}\nall_bw <- ts(sapply(prev_oos_tvlm_all$model, `[[`, \"bw\"),\n             end = end(prev_oos_tvlm_all$prevision),\n             frequency = frequency(data))\nplot(all_bw)\n```\n\n::: {.cell-output-display}\n![](TP_files/figure-html/bw-tvlm-soos-1.png){width=672}\n:::\n\n```{.r .cell-code}\nres_tvlm_all_oos <- prev_oos_tvlm_all$residuals\nrmse_tvlm[\"OOS\"] <- rmse(res_tvlm_all_oos)\nrbind(rmse_lm, rmse_rm, rmse_rm2, rmse_tvlm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 IS       OOS\nrmse_lm   0.6990756 0.8494077\nrmse_rm   0.5731039 1.3826525\nrmse_rm2  0.6003532 0.8747103\nrmse_tvlm 0.5971192 0.8595945\n```\n:::\n\n```{.r .cell-code}\n# Après 2010\napply(window(ts.union(res_lm_oos, res_rm_oos, res_rm2_oos, res_tvlm_all_oos), start = 2010), 2, rmse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      res_lm_oos       res_rm_oos      res_rm2_oos res_tvlm_all_oos \n       0.7863127        1.1067406        0.7050171        0.8075138 \n```\n:::\n:::\n\n::: \n\n::: {.callout-tip icon=false}\n## Actualisation des coefficients uniquement\n\nFixons maintenant la fenêtre à la dernière valeur estimée :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprev_oos_tvlm_lastbw <- oos_prev(tvlm, end = end(data), frequency = frequency(data),fixed_bw = TRUE)\nres_tvlm_lastbw_oos <- prev_oos_tvlm_lastbw$residuals\nrmse_tvlm[\"OOS\"] <- rmse(res_tvlm_lastbw_oos)\nrbind(rmse_lm, rmse_rm, rmse_rm2, rmse_tvlm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 IS       OOS\nrmse_lm   0.6990756 0.8494077\nrmse_rm   0.5731039 1.3826525\nrmse_rm2  0.6003532 0.8747103\nrmse_tvlm 0.5971192 0.9799976\n```\n:::\n\n```{.r .cell-code}\n# Après 2010\napply(window(ts.union(res_lm_oos, res_rm_oos, res_rm2_oos, res_tvlm_all_oos, res_tvlm_lastbw_oos), start = 2010), 2, rmse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         res_lm_oos          res_rm_oos         res_rm2_oos    res_tvlm_all_oos \n          0.7863127           1.1067406           0.7050171           0.8075138 \nres_tvlm_lastbw_oos \n          0.7231632 \n```\n:::\n:::\n\n\nLe RMSE en temps-réel est réduit par rapport à précédemment mais il reste plus élevé qu'avec la régression linéaire.\n:::\n::::\n\n::: {.callout-remarque}\n## Remarque\n\nPour fixer certaines variables, on pourrait faire une régression en deux étapes.\nLa fonction `rmse_prev()` permet de calculer les prévisions dans l'échantillon et hors échantillon sur le modèle de régression linéaire, la régression par morceaux, la régression locale en fixant ou non certains coefficients.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp_prev <- rmse_prev(model_c5, fixed_var = c(3, 4, 5, 6), fixed_bw = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCalculating regression bandwidth... bw =  0.4698719 \nCalculating regression bandwidth... bw =  0.3501963 \n```\n:::\n\n```{.r .cell-code}\ncomp_prev\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                       RMSE_in_sample RMSE_out_of_sample\nlm                          0.6990756          0.8494077\npiece_lm                    0.5731039          1.3826525\npiece_lm fixed coeff        0.6003532          0.8747103\nTvLM                        0.5971192          0.9799976\npiece_tvlm                  0.5354897          1.4605933\npiece_tvlm fixed coeff      0.5470547          1.0154322\nTvLM fixed coeff            0.6254196          0.8574867\n```\n:::\n:::\n\nSept modèles différents sont estimés, dans l'ordre :\n\n1. Modèle de régression linéaire.\n\n2. Régression linéaire par morceaux où toutes les variables divisées en fonction de la date de rupture.\n\n3. Régression linéaire par morceaux où toutes les variables, sauf celles spécifiées par `fixed_var`, sont  divisées en fonction de la date de rupture.\n\n4. Régression locale.\n\n5. Régression locale avec toutes les variables divisées en fonction de la date de rupture.\n\n6. Régression locale où toutes les variables, sauf celles spécifiées par `fixed_var`, sont  divisées en fonction de la date de rupture.\n\n7. Régression locale où les variables celles spécifiées par `fixed_var` sont estimées par une régression linéaire (coefficients fixes sur l'ensemble de la période).\n\n\nOn peut ensuite récupérer tous les résidus en temps réel :\n\n::: {.cell}\n\n```{.r .cell-code}\ncomp_prev_tr <- do.call(cbind, lapply(comp_prev$prevision, `[[`, \"residuals\"))\napply(window(comp_prev_tr, start = 2010), 2, rmse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n             prev_lm        prev_piece_lm   prev_piece_lm_fixe \n           0.7863127            1.1067406            0.7050171 \n           prev_tvlm      prev_piece_tvlm prev_piece_tvlm_fixe \n           0.7231632            1.0894378            0.7072981 \n      prev_tvlm_fixe \n           0.7246941 \n```\n:::\n:::\n\n:::\n\n# Modèles espace-état\n\nDans cette dernière partie nous estimons un modèle espace-état avec coefficients qui varient dans le temps.\n\nPour rappel, puisque nous avons 6 variables exogènes, le modèle s'écrit :\n\n$$\n\\begin{cases}\ny_t=X_t\\alpha_t+\\varepsilon_t,\\quad&\\varepsilon_t\\sim\\mathcal N(0,\\sigma^2)\\\\\n\\alpha_{t+1}=\\alpha_t+\\eta_t,\\quad&\\eta_t\\sim\\mathcal N(0,\\sigma^2 Q)\n\\end{cases},\\text{ avec }\\eta_t\\text{ et }\\varepsilon_t\\text{ indépendants et }\nQ = \\begin{pmatrix}q_1 &  &0 \\\\ & \\ddots \\\\ 0 & & q_6 \\end{pmatrix}\n$$\n\nLa matrice $Q$ peut-être imposée par l'utilisateur (par exemple variance nulle si l'on veut fixer tous les coefficients) ou estimée.\n\nIl y a également deux opérations classiques : \n\n- *smoothing* : estimation de $\\hat\\alpha_t=E[\\alpha_t|y]$ et $V_t=V[\\alpha_t-\\hat\\alpha_t]=V[\\alpha_t|y]$ : coefficients et variances estimés en utilisant l'ensemble des données disponibles ;\n\n- *filtering* : estimation de $a_{t+1}=E[\\alpha_{t+1}|Y_t]$ et $P_{t+1}=V[\\alpha_{t+1}|Y_t]$ : coefficients et variances estimés de manière dynamique en utilisant l'information disponible jusqu'à la date précédente (estimation en temps-réel).\n\nPour estimer ces modèles nous utiliserons la fonction `tvCoef::ssm_lm()` dont le premier paramètre est un modèle de régression linéaire (le modèle `model_c5`).\n\n::: {.callout-note}\n## Exercice\n\nPar défaut, `tvCoef::ssm_lm()` estime le modèle en forçant $q_1=q_2=\\dots=q_6=0$.\nQuel modèle retrouve-t-on ?\nRegarder les résultats de cette fonction et interpréter les quantités de `\"smoothed_states\"`, `\"filtering_states\"`,`\"smoothed_stdev\"` (sauf dernière colonne). \n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nLe modèle estimé est le modèle de régression linéaire !\n\nLa composante `smoothed_states` contient les coefficients du modèle de régression linéaire estimé en utilisant toutes les données.\nLa dernière colonne (`\"noise\"`) contient les résidus.\nLa composante `smoothed_stdev` contient les écart-types associés aux différents coefficients, la dernière colonne s'interprète de manière plus complexe et ne sera pas détaillée ici.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod_ssm <- ssm_lm(model_c5)\nsummary(model_c5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nTime series regression with \"ts\" data:\nStart = 1993(2), End = 2019(4)\n\nCall:\ndynlm(formula = prod_c5 ~ overhang_ipi1_c5 + insee_bc_c5_m3 + \n    insee_oscd_c5_m2 + diff(insee_tppre_c5_m3, 1) + diff(bdf_tuc_c5_m2, \n    1), data = data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-2.3241 -0.4566  0.0140  0.4495  1.6115 \n\nCoefficients:\n                            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                -6.383023   3.213333  -1.986  0.04970 *  \noverhang_ipi1_c5            0.102405   0.022681   4.515 1.72e-05 ***\ninsee_bc_c5_m3              0.061437   0.029218   2.103  0.03797 *  \ninsee_oscd_c5_m2           -0.005596   0.015019  -0.373  0.71021    \ndiff(insee_tppre_c5_m3, 1)  0.039043   0.012029   3.246  0.00159 ** \ndiff(bdf_tuc_c5_m2, 1)      0.397070   0.077580   5.118 1.48e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.7195 on 101 degrees of freedom\nMultiple R-squared:  0.7155,\tAdjusted R-squared:  0.7014 \nF-statistic: 50.79 on 5 and 101 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\ntail(mod_ssm$smoothed_states, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       (Intercept) overhang_ipi1_c5 insee_bc_c5_m3 insee_oscd_c5_m2\n[105,]   -6.383023        0.1024052     0.06143715     -0.005596399\n[106,]   -6.383023        0.1024052     0.06143715     -0.005596399\n[107,]   -6.383023        0.1024052     0.06143715     -0.005596399\n       diff(insee_tppre_c5_m3, 1) diff(bdf_tuc_c5_m2, 1)      noise\n[105,]                 0.03904254              0.3970705  0.5785851\n[106,]                 0.03904254              0.3970705  0.1141372\n[107,]                 0.03904254              0.3970705 -0.6226152\n```\n:::\n\n```{.r .cell-code}\ntail(mod_ssm$smoothed_stdev, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       (Intercept) overhang_ipi1_c5 insee_bc_c5_m3 insee_oscd_c5_m2\n[105,]    3.213333       0.02268142     0.02921753       0.01501868\n[106,]    3.213333       0.02268142     0.02921753       0.01501868\n[107,]    3.213333       0.02268142     0.02921753       0.01501868\n       diff(insee_tppre_c5_m3, 1) diff(bdf_tuc_c5_m2, 1)     noise\n[105,]                 0.01202881             0.07757954 0.1554965\n[106,]                 0.01202881             0.07757954 0.1367629\n[107,]                 0.01202881             0.07757954 0.1460395\n```\n:::\n:::\n\nLa composante `filtering_states` donne les estimations des coefficients en temps réel : la valeur à la date $t$ correspond aux estimations des coefficients en utilisant les données jusqu'en $t-1$.\nAinsi, en estimant le modèle jusqu'en 2010T1, les coefficients obtenus sont ceux de la composante `filtering_states` de 2010T2\\ :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(dynlm(\n  formula = prod_c5 ~ overhang_ipi1_c5 + insee_bc_c5_m3 + insee_oscd_c5_m2\n  + diff(insee_tppre_c5_m3, 1) + diff(bdf_tuc_c5_m2, 1),\n  data = window(data, end = 2010)\n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nTime series regression with \"ts\" data:\nStart = 1993(2), End = 2010(1)\n\nCall:\ndynlm(formula = prod_c5 ~ overhang_ipi1_c5 + insee_bc_c5_m3 + \n    insee_oscd_c5_m2 + diff(insee_tppre_c5_m3, 1) + diff(bdf_tuc_c5_m2, \n    1), data = window(data, end = 2010))\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1.93741 -0.36837 -0.02174  0.41270  1.50865 \n\nCoefficients:\n                            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                 0.687568   4.010977   0.171 0.864451    \noverhang_ipi1_c5            0.096558   0.029839   3.236 0.001947 ** \ninsee_bc_c5_m3             -0.003804   0.036838  -0.103 0.918081    \ninsee_oscd_c5_m2            0.027262   0.018837   1.447 0.152869    \ndiff(insee_tppre_c5_m3, 1)  0.047953   0.013331   3.597 0.000639 ***\ndiff(bdf_tuc_c5_m2, 1)      0.595962   0.104419   5.707 3.46e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.6887 on 62 degrees of freedom\nMultiple R-squared:  0.8058,\tAdjusted R-squared:  0.7902 \nF-statistic: 51.46 on 5 and 62 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nwindow(mod_ssm$filtering_states, start = 2010, end = c(2010,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        (Intercept) overhang_ipi1_c5 insee_bc_c5_m3 insee_oscd_c5_m2\n2010 Q1   0.4262027       0.09515354   -0.001352874       0.02587391\n2010 Q2   0.6875678       0.09655775   -0.003804293       0.02726163\n        diff(insee_tppre_c5_m3, 1) diff(bdf_tuc_c5_m2, 1) noise\n2010 Q1                 0.04759521              0.5960833     0\n2010 Q2                 0.04795263              0.5959618     0\n```\n:::\n:::\n\n:::\n\n::: {.callout-note}\n## Exercice\n\nEstimer maintenant le modèle en utilisant les paramètres suivants :\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_ssm <- ssm_lm(model_c5,\n       var_intercept = 0.01, fixed_var_intercept = FALSE,\n       var_variables = 0.01, fixed_var_variables = FALSE)\n```\n:::\n\n\nLes paramètres `fixed_var_intercept = FALSE` et `fixed_var_variables = FALSE` permettent d'indiquer que les variances $q_1,\\dots, q_6$ seront estimées.\nLes paramètres `var_intercept` et `var_variables` n'auront généralement aucun impact sur les résultats (puisque dans notre cas les variances sont estimées), ils interviennent toutefois dans le processus algorithmique : les modifier permet dans certains cas d'éviter des erreurs d'optimisation.\n\nRegarder les coefficients `model_ssm$smoothed_states` : quelles sont les variables qui varient dans le temps ?\nÀ partir de `model_ssm$fitted`, comparer la qualité prédictive de ce modèle avec les précédents.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nLes variables fixes sont la constante et les carnets de commandes globaux :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(model_ssm$smoothed_states[,-ncol(model_ssm$smoothed_states)])\n```\n\n::: {.cell-output-display}\n![](TP_files/figure-html/coef-ssm-1.png){width=672}\n:::\n:::\n\nOn peut également vérifier en regardant les variances $\\sigma^2q_i$ :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_ssm$parameters$parameters * model_ssm$parameters$scaling\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               (Intercept).var           overhang_ipi1_c5.var \n                  1.870276e-03                   3.863439e-04 \n            insee_bc_c5_m3.var           insee_oscd_c5_m2.var \n                  0.000000e+00                   1.097830e-06 \ndiff(insee_tppre_c5_m3, 1).var     diff(bdf_tuc_c5_m2, 1).var \n                  0.000000e+00                   3.462322e-03 \n                     noise.var \n                  3.548244e-01 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nres_ssm_is <- y - model_ssm$fitted[,\"smoothed\"]\nres_ssm_oos <- y - model_ssm$fitted[,\"filtering\"]\nrmse_ssm <- c(IS = rmse(res_ssm_is), OOS = rmse(res_ssm_oos))\nrbind(rmse_lm, rmse_rm, rmse_rm2, rmse_tvlm, rmse_ssm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 IS       OOS\nrmse_lm   0.6990756 0.8494077\nrmse_rm   0.5731039 1.3826525\nrmse_rm2  0.6003532 0.8747103\nrmse_tvlm 0.5971192 0.9799976\nrmse_ssm  0.5422771 0.7441522\n```\n:::\n\n```{.r .cell-code}\n# Après 2010\napply(window(ts.union(res_lm_oos, res_rm_oos, res_rm2_oos, res_tvlm_lastbw_oos, res_ssm_oos), start = 2010), 2, rmse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         res_lm_oos          res_rm_oos         res_rm2_oos res_tvlm_lastbw_oos \n          0.7863127           1.1067406           0.7050171           0.7231632 \n        res_ssm_oos \n          0.6863295 \n```\n:::\n:::\n\n\nEn réalité, la composante *filtering* ne correspond pas exactement à de l'estimation en temps-réel car certains paramètres ne sont pas estimés de manière dynamique.\nPour avoir une vraie estimation en temps-réel, il faudrait réestimer le modèle à chaque date : on peut pour cela utiliser la fonction `ssm_lm_oos()`.\nPour que cette fonction marche, il faut parfois jouer sur les paramètres `var_intercept` et `var_variables`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_ssm_oos <- ssm_lm_oos(model_c5,\n       var_intercept = 0.001, fixed_var_intercept = FALSE,\n       var_variables = 0.001, fixed_var_variables = FALSE)\nres_ssm_oos <- y - model_ssm_oos$prevision\n\nrmse_ssm <- c(IS = rmse(res_ssm_is), OOS = rmse(res_ssm_oos))\nrbind(rmse_lm, rmse_rm, rmse_rm2, rmse_tvlm, rmse_ssm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 IS       OOS\nrmse_lm   0.6990756 0.8494077\nrmse_rm   0.5731039 1.3826525\nrmse_rm2  0.6003532 0.8747103\nrmse_tvlm 0.5971192 0.9799976\nrmse_ssm  0.5422771 0.7337112\n```\n:::\n\n```{.r .cell-code}\napply(window(ts.union(res_lm_oos, res_rm_oos, res_rm2_oos, res_tvlm_lastbw_oos, res_ssm_oos), start = 2010), 2, rmse)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         res_lm_oos          res_rm_oos         res_rm2_oos res_tvlm_lastbw_oos \n          0.7863127           1.1067406           0.7050171           0.7231632 \n        res_ssm_oos \n          0.6571734 \n```\n:::\n:::\n\n\nOn peut enfin faire un graphique avec toutes les prévisions, en utilisant par exemple le package `dygraphs` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dygraphs)\nprevs <- ts.intersect(y, y - res_lm_oos, y - res_rm2_oos, y - res_tvlm_lastbw_oos, y - res_ssm_oos)\ncolnames(prevs) <- c(\"y\", \"lm\", \"Reg par morceaux\", \"Reg locale\", \"SSM\")\ndygraph(prevs) %>% \n  dyRangeSelector(dateWindow = c(\"2010-01-01\", \"2019-12-01\")) %>%\n  dyOptions(colors = c(\"black\", \"red\", \"green\", \"blue\", \"purple\"))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"dygraphs html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-928b8b3e3de800b364ce\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-928b8b3e3de800b364ce\">{\"x\":{\"attrs\":{\"labels\":[\"quarter\",\"y\",\"lm\",\"Reg par morceaux\",\"Reg locale\",\"SSM\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60,\"drawAxis\":true},\"y\":{\"drawAxis\":true}},\"showRangeSelector\":true,\"dateWindow\":[\"2010-01-01T00:00:00.000Z\",\"2019-12-01T00:00:00.000Z\"],\"rangeSelectorHeight\":40,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"#808FAB\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\",\"stackedGraph\":false,\"fillGraph\":false,\"fillAlpha\":0.15,\"stepPlot\":false,\"drawPoints\":false,\"pointSize\":1,\"drawGapEdgePoints\":false,\"connectSeparatedPoints\":false,\"strokeWidth\":1,\"strokeBorderColor\":\"white\",\"colors\":[\"black\",\"red\",\"green\",\"blue\",\"purple\"],\"colorValue\":0.5,\"colorSaturation\":1,\"includeZero\":false,\"drawAxesAtZero\":false,\"logscale\":false,\"axisTickSize\":3,\"axisLineColor\":\"black\",\"axisLineWidth\":0.3,\"axisLabelColor\":\"black\",\"axisLabelFontSize\":14,\"axisLabelWidth\":60,\"drawGrid\":true,\"gridLineWidth\":0.3,\"rightGap\":5,\"digitsAfterDecimal\":2,\"labelsKMB\":false,\"labelsKMG2\":false,\"labelsUTC\":false,\"maxNumberWidth\":6,\"animatedZooms\":false,\"mobileDisableYTouch\":true,\"disableZoom\":false},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"datafixedtz\":false,\"tzone\":\"\"},\"evals\":[\"attrs.interactionModel\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n:::\n\n\n::: {.callout-note}\n## Exercice facultatif\n\nL'objectif de cet exercice est d'estimer un nouveau modèle jusqu'en 2022T4 pour faire une prévision jusqu'en 2023T1 :\n\n1. Créer des indicatrices sur les 4 premiers trimestres de l'année 2020.\n\n2. Estimer un nouveau modèle `dynlm` en ajoutant ces indicatrices.\n\n3. Estimer un nouveau modèle espace-état.\n\n4. Utiliser les variables exogènes du modèle jusqu'en 2023T1 (on peut pour cela appliquer la fonction `tvCoef::full_exogeneous_matrix()` sur le modèle `dynlm`) et la dernière ligne de la composante `\"smoothed_states\"` pour effectuer des prévisions sur 2023T1.\n::::\n\n::: {.callout-caution collapse=\"true\"}\n## Indice (création des indicatrices)\n\nOn pourra utiliser le programme suivant pour créer les indicatrices :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nind <- cbind(time(manufacturing) == 2020, time(manufacturing) == 2020.25, time(manufacturing) == 2020.5,\ntime(manufacturing) == 2020.75)\nind <- ts(apply(ind,2, as.numeric), start = start(manufacturing), frequency = 4)\ncolnames(ind) <- sprintf(\"ind2020Q%i\", 1:4)\ndata <- ts.union(manufacturing, ind)\ncolnames(data) <- c(colnames(manufacturing), colnames(ind))\n```\n:::\n\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\nEstimation du modèle de régression linéaire :\n\n::: {.cell}\n\n```{.r .cell-code}\nind <- cbind(time(manufacturing) == 2020, time(manufacturing) == 2020.25, time(manufacturing) == 2020.5,\ntime(manufacturing) == 2020.75)\nind <- ts(apply(ind,2, as.numeric), start = start(manufacturing), frequency = 4)\ncolnames(ind) <- sprintf(\"ind2020Q%i\", 1:4)\ndata <- ts.union(manufacturing, ind)\ncolnames(data) <- c(colnames(manufacturing), colnames(ind))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- ts.union(manufacturing, ind)\ncolnames(data) <- c(colnames(manufacturing), colnames(ind))\nmodel_c5_complet <- dynlm(\n  formula = prod_c5 ~ overhang_ipi1_c5 + insee_bc_c5_m3 + insee_oscd_c5_m2\n  + diff(insee_tppre_c5_m3, 1) + diff(bdf_tuc_c5_m2, 1) \n  + ind2020Q1 + ind2020Q2 + ind2020Q3 + ind2020Q4,\n  data = data\n)\nsummary(model_c5_complet)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nTime series regression with \"ts\" data:\nStart = 1990(2), End = 2022(4)\n\nCall:\ndynlm(formula = prod_c5 ~ overhang_ipi1_c5 + insee_bc_c5_m3 + \n    insee_oscd_c5_m2 + diff(insee_tppre_c5_m3, 1) + diff(bdf_tuc_c5_m2, \n    1) + ind2020Q1 + ind2020Q2 + ind2020Q3 + ind2020Q4, data = data)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.50121 -0.40188  0.00267  0.48994  1.57418 \n\nCoefficients:\n                            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)                -6.924304   3.182453  -2.176   0.0315 *  \noverhang_ipi1_c5            0.115792   0.020951   5.527 1.91e-07 ***\ninsee_bc_c5_m3              0.065321   0.028967   2.255   0.0259 *  \ninsee_oscd_c5_m2           -0.009964   0.014757  -0.675   0.5008    \ndiff(insee_tppre_c5_m3, 1)  0.026459   0.011405   2.320   0.0220 *  \ndiff(bdf_tuc_c5_m2, 1)      0.361476   0.077713   4.651 8.49e-06 ***\nind2020Q1                  -5.195550   0.788939  -6.585 1.23e-09 ***\nind2020Q2                  -7.650566   1.654785  -4.623 9.53e-06 ***\nind2020Q3                  16.223534   1.482828  10.941  < 2e-16 ***\nind2020Q4                   3.324056   0.810984   4.099 7.55e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.7705 on 121 degrees of freedom\n  (131 observations effacées parce que manquantes)\nMultiple R-squared:  0.9393,\tAdjusted R-squared:  0.9348 \nF-statistic: 208.1 on 9 and 121 DF,  p-value: < 2.2e-16\n```\n:::\n\n```{.r .cell-code}\nprev_oos_lm_complet <- oos_prev(model_c5_complet)\n```\n:::\n\n\nEstimation du modèle espace-état :\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_ssm_complet <- ssm_lm(model_c5_complet,\n       var_intercept = 0.01, fixed_var_intercept = FALSE,\n       var_variables = 0.01, fixed_var_variables = FALSE)\n# # Rmq : on pourrait également fixer à 0 les variances des coefficients associées aux indicatrices :\n# model_ssm_complet <- ssm_lm(model_c5_complet,\n#         var_intercept = 0.01, fixed_var_intercept = FALSE,\n#         var_variables = c(rep(0.01,5), rep(0, 4)), \n#         fixed_var_variables = c(rep(FALSE,5), rep(TRUE, 4)))\n\nmodel_ssm_complet_oos <- ssm_lm_oos(model_c5_complet, date = 18*4,\n       var_intercept = 0.01, fixed_var_intercept = FALSE,\n       var_variables = 0.01, fixed_var_variables = FALSE)\n```\n:::\n\n\nEnfin, pour calculer les prévisions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nX_variables = full_exogeneous_matrix(model_c5_complet)\nwindow(X_variables, start = 2022)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        (Intercept) overhang_ipi1_c5 insee_bc_c5_m3 insee_oscd_c5_m2\n2022 Q1           1         7.629539          108.0              4.5\n2022 Q2           1         2.870669          105.8             -2.2\n2022 Q3           1         2.663170           97.9            -16.0\n2022 Q4           1         1.979440           96.2            -24.6\n2023 Q1           1         1.737138           98.7            -23.0\n        diff(insee_tppre_c5_m3, 1) diff(bdf_tuc_c5_m2, 1) ind2020Q1 ind2020Q2\n2022 Q1                      -20.1                  -0.23         0         0\n2022 Q2                        0.1                   0.53         0         0\n2022 Q3                       -9.7                   0.57         0         0\n2022 Q4                       10.1                  -1.88         0         0\n2023 Q1                       -1.9                  -0.49         0         0\n        ind2020Q3 ind2020Q4\n2022 Q1         0         0\n2022 Q2         0         0\n2022 Q3         0         0\n2022 Q4         0         0\n2023 Q1         0         0\n```\n:::\n\n```{.r .cell-code}\nprevs_lm <- rowSums(X_variables %*% diag(coef(model_c5_complet)))\nprevs_lm <- prevs_lm[length(prevs_lm)]\nprevs_ssm <- rowSums(X_variables %*% diag(model_ssm_complet$smoothed_states[nrow(model_ssm_complet$smoothed_states), - ncol(model_ssm_complet$smoothed_states)]))\nprevs_ssm <- prevs_ssm[length(prevs_ssm)]\nfull_prevs <- ts.union(prev_oos_lm_complet$prevision,\n                       model_ssm_complet_oos$prevision)\nfull_prevs <- ts(rbind(full_prevs,\n                       c(prevs_lm, prevs_ssm)),\n                 start = start(full_prevs),\n                 frequency = frequency(full_prevs))\ndata_forecasts <- ts.union(manufacturing[,\"prod_c5\"], full_prevs)\ndata_forecasts <- window(data_forecasts, start = 2010)\ncolnames(data_forecasts) <- c(\"y\", \"lm\", \"SSM\")\ndygraph(data_forecasts) %>% \n  dyRangeSelector(dateWindow = c(\"2018-01-01\", \"2023-03-01\"))\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"dygraphs html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-8f735e529339a41a7382\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-8f735e529339a41a7382\">{\"x\":{\"attrs\":{\"labels\":[\"quarter\",\"y\",\"lm\",\"SSM\"],\"legend\":\"auto\",\"retainDateWindow\":false,\"axes\":{\"x\":{\"pixelsPerLabel\":60}},\"showRangeSelector\":true,\"dateWindow\":[\"2018-01-01T00:00:00.000Z\",\"2023-03-01T00:00:00.000Z\"],\"rangeSelectorHeight\":40,\"rangeSelectorPlotFillColor\":\" #A7B1C4\",\"rangeSelectorPlotStrokeColor\":\"#808FAB\",\"interactionModel\":\"Dygraph.Interaction.defaultModel\"},\"scale\":\"quarterly\",\"annotations\":[],\"shadings\":[],\"events\":[],\"format\":\"date\",\"data\":[[\"2010-01-01T00:00:00.000Z\",\"2010-04-01T00:00:00.000Z\",\"2010-07-01T00:00:00.000Z\",\"2010-10-01T00:00:00.000Z\",\"2011-01-01T00:00:00.000Z\",\"2011-04-01T00:00:00.000Z\",\"2011-07-01T00:00:00.000Z\",\"2011-10-01T00:00:00.000Z\",\"2012-01-01T00:00:00.000Z\",\"2012-04-01T00:00:00.000Z\",\"2012-07-01T00:00:00.000Z\",\"2012-10-01T00:00:00.000Z\",\"2013-01-01T00:00:00.000Z\",\"2013-04-01T00:00:00.000Z\",\"2013-07-01T00:00:00.000Z\",\"2013-10-01T00:00:00.000Z\",\"2014-01-01T00:00:00.000Z\",\"2014-04-01T00:00:00.000Z\",\"2014-07-01T00:00:00.000Z\",\"2014-10-01T00:00:00.000Z\",\"2015-01-01T00:00:00.000Z\",\"2015-04-01T00:00:00.000Z\",\"2015-07-01T00:00:00.000Z\",\"2015-10-01T00:00:00.000Z\",\"2016-01-01T00:00:00.000Z\",\"2016-04-01T00:00:00.000Z\",\"2016-07-01T00:00:00.000Z\",\"2016-10-01T00:00:00.000Z\",\"2017-01-01T00:00:00.000Z\",\"2017-04-01T00:00:00.000Z\",\"2017-07-01T00:00:00.000Z\",\"2017-10-01T00:00:00.000Z\",\"2018-01-01T00:00:00.000Z\",\"2018-04-01T00:00:00.000Z\",\"2018-07-01T00:00:00.000Z\",\"2018-10-01T00:00:00.000Z\",\"2019-01-01T00:00:00.000Z\",\"2019-04-01T00:00:00.000Z\",\"2019-07-01T00:00:00.000Z\",\"2019-10-01T00:00:00.000Z\",\"2020-01-01T00:00:00.000Z\",\"2020-04-01T00:00:00.000Z\",\"2020-07-01T00:00:00.000Z\",\"2020-10-01T00:00:00.000Z\",\"2021-01-01T00:00:00.000Z\",\"2021-04-01T00:00:00.000Z\",\"2021-07-01T00:00:00.000Z\",\"2021-10-01T00:00:00.000Z\",\"2022-01-01T00:00:00.000Z\",\"2022-04-01T00:00:00.000Z\",\"2022-07-01T00:00:00.000Z\",\"2022-10-01T00:00:00.000Z\",\"2023-01-01T00:00:00.000Z\"],[-0.167783266259136,1.69005476811697,0.509685174055763,1.02110044270685,2.64191319590681,-0.567791159314213,-0.544266244339853,-0.818624262677459,-0.835556962597805,-1.0865971153298,0.591340833640719,-2.15206554747035,-0.0667548924309314,0.474627915152936,-0.726657724383273,0.528715104803079,0.399710151702859,-0.221177127956784,0.312667708892356,-0.331464725175035,0.291725497975426,0.468893620487054,0.274464389114071,0.779562751914264,-0.0882400128349059,-0.662958077650977,1.02301199672081,-0.117723703610573,0.810161345691718,1.08515516810825,0.854537696229252,1.28931692924346,-1.72138986292636,1.05696421980381,0.375199220825206,-0.348435897718624,0.648409405255879,0.247358758149097,-0.312547978856403,-0.707362955303026,-5.95847459504975,-18.6416116870877,24.2741503395746,3.89186669773947,0.280394795872585,-0.518957611005477,-0.54977177163672,-0.461241054975869,1.70018966711718,-0.302637750429946,-0.305796695603477,-0.38201388732837,null],[-0.21874822111444,1.14678994397449,-1.07831640780086,1.75823059116731,1.48895072193119,0.37477622629234,-2.21877122269024,-0.533186676518109,-0.675278494415403,-1.37371361342799,-0.589802104172525,-1.27997452197818,-1.00573199947518,-0.117249318837291,-0.804151284179511,0.875025283151804,-0.55641457136398,-0.554263488047868,-0.451913336076935,0.527495944237418,-0.051735828063333,-0.122082867457921,-0.149780832752672,0.287827436626796,0.312498711127092,0.00784567665297976,-0.231881337640345,-0.042953644343705,0.0756242853097573,1.31044613737323,0.517035494114748,1.07092634485028,-0.320823488632073,-0.601648912345408,1.09794988575385,-0.378203169754384,-0.110824763627969,-0.279127473912481,-0.424673216670773,0.0249304432654448,-0.771194908141357,-11.3145390981881,8.57637124535682,0.430534046352304,1.02337487304706,1.46923726962256,2.1166916395762,0.76834156038799,0.243863593173703,0.566903200622986,-0.0960188930294111,-0.592422425124903,-0.274222558724507],[0.448193181636783,1.74909574904903,-0.747387440517036,1.55707305286648,2.10986011672255,-0.661130838174589,-1.90111356851479,-0.57690732242507,-1.00029602753054,-1.23040678318521,-0.163601932729755,-1.6389752902439,-0.0452075795833396,0.670958163887926,-0.764353705691536,0.559612779833786,-1.00528876621862,-0.113491240681419,0.146884086466711,-0.0464372456697728,0.322041919655856,0.0113606871745559,-0.247753242112387,-0.00754505051094767,0.933438139789846,-0.112607023166491,-0.0383572260157961,-0.366357888104595,0.0150734076176383,1.44345730985665,0.751413370699418,1.35363263712115,-0.767153668298033,0.145546259684851,0.543167130965691,0.427190636391591,0.178706575186847,-0.236767520157501,-0.00800157945751501,0.875415205410301,0.265086737304131,-17.0550982944271,11.2943408965797,2.00909572598202,2.19604052206082,0.843434888678343,0.445620220575049,0.153492629884777,0.640066285713888,-0.0490345045999437,0.156869145256114,-1.05439598195343,-0.282767584688101]]},\"evals\":[\"attrs.interactionModel\"],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n:::\n\n\n\n\n\n",
    "supporting": [
      "TP_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\r\n<script src=\"site_libs/jquery-1.11.1/jquery.min.js\"></script>\r\n<link href=\"site_libs/dygraphs-1.1.1/dygraph.css\" rel=\"stylesheet\" />\r\n<script src=\"site_libs/dygraphs-1.1.1/dygraph-combined.js\"></script>\r\n<script src=\"site_libs/dygraphs-1.1.1/shapes.js\"></script>\r\n<script src=\"site_libs/moment-2.8.4/moment.js\"></script>\r\n<script src=\"site_libs/moment-timezone-0.2.5/moment-timezone-with-data.js\"></script>\r\n<script src=\"site_libs/moment-fquarter-1.0.0/moment-fquarter.min.js\"></script>\r\n<script src=\"site_libs/dygraphs-binding-1.1.1.6/dygraphs.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}